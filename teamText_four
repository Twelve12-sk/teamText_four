#include<opencv2/opencv.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>
using namespace cv;
using namespace std;

Mat mask, dst1, dst2,dst3, src ,src1,src2;   //设置二维点集变量

Mat result = imread("D:/CloudMusic/任务四.jpg");


void function1(Mat src)   //小可乐瓶
{
    Mat dst1,dst2,src1,src2;
    blur(src, src1, Size(4, 4));
    inRange(src1, Scalar(0, 0, 77), Scalar(48, 49, 125), dst2);
    vector<vector<Point>>contours;
    vector<Vec4i> hierarchy;
    findContours(dst2, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours.size(); i++)
    {
        double area0 = contourArea(contours[i]);
        if (area0 > 1400)
        {
            Rect s = boundingRect(contours[i]);
            s.x = s.tl().x - 8;
            s.y = s.tl().y - 20;
            Point ptr2;
            ptr2 = s.br();
            ptr2.x = ptr2.x + 10;
            ptr2.y = ptr2.y + 20;

            for (int i = 0; i < 2; i++)
            {
                rectangle(result, s.tl(), ptr2, Scalar(100, 200, 211), 2, LINE_AA);
            }
        }
    }

    //inRange(src, Scalar(0, 0, 0), Scalar(54, 50, 183), src1);
    //Mat element = getStructuringElement(MORPH_RECT, Size(3, 3));
    //morphologyEx(src1, src2, MORPH_DILATE, element, Point(1, 1), 2);
    //vector<vector<Point>>contours;
    //vector<Vec4i> hierarchy;
    //findContours(src2, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    //for (int i = 0; i < contours.size(); i++)
    //{
    //    RotatedRect s = minAreaRect(contours[i]);

    //    if (s.boundingRect().area() > 5000 && s.boundingRect().area() < 6000)
    //    {
    //        rectangle(src, s.boundingRect().tl(), s.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
    //        //p1 = s.boundingRect().tl();
    //    }
    //}

}
void function2(Mat src)   //大雪碧瓶
{
    Mat src1,dst1,dst2,dst3;
    blur(src, src1, Size(5, 5));
    inRange(src1, Scalar(0, 92, 0), Scalar(98, 184, 122), dst1);
    Mat element = getStructuringElement(MORPH_RECT, Size(3, 3));
    morphologyEx(dst1, dst2, MORPH_OPEN, element);
    Canny(dst2, dst3, 3, 9, 3);
    Point2f p1;
    vector<vector<Point>>contours_2;
    vector<Vec4i> hierarchy_2;
    findContours(dst3, contours_2, hierarchy_2, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    vector<vector<Point>>contours_poly(contours_2.size());
    vector<Rect>boundRect(contours_2.size());
    for (unsigned int i = 0; i < contours_2.size(); i++)
    {
        approxPolyDP(Mat(contours_2[i]), contours_poly[i], 3, true);
        boundRect[i] = boundingRect(Mat(contours_poly[i]));
    }
    for (unsigned int i = 0; i < contours_2.size(); i++)
    {
        if (boundRect[i].area() > 10000 && boundRect[i].area() < 20000)
        {
            if (boundRect[i].area() > 11000 && boundRect[i].area() < 20000)
            {
                continue;
            }
            p1.x = boundRect[i].tl().x - 15;
            p1.y = boundRect[i].tl().y - 155;
            rectangle(result, p1, boundRect[i].br(), Scalar(100, 200, 211), 2, LINE_AA);
           
        }

    }
}
void function3(Mat src) //大牛奶箱
{
    Mat dst1, dst2, dst3;
    inRange(src, Scalar(0, 53, 128), Scalar(112, 134, 244), dst1);
    Mat element = getStructuringElement(MORPH_RECT, Size(3, 3));
    morphologyEx(dst1, dst2, MORPH_ERODE, element, Point(1, 1), 1);
    morphologyEx(dst2, dst3, MORPH_DILATE, element, Point(1, 1), 2);
    vector<vector<Point>>contours;
    vector<Vec4i> hierarchy;
    findContours(dst3, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours.size(); i++)
    {
        RotatedRect s = minAreaRect(contours[i]);
        if (s.boundingRect().area() > 15000)
        {
            rectangle(result, s.boundingRect().tl(), s.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
        }
    }
}
void function4(Mat src)
{
    Mat srcimage1, srcimage2, dstimage1, dstimage2;
    Point p1; //记录矩形左上角点
    Point p2; //记录矩形右下角点

    inRange(src, Scalar(0, 0, 0), Scalar(54, 50, 183), srcimage1);
    Mat element = getStructuringElement(MORPH_RECT, Size(3, 3));
    morphologyEx(srcimage1, srcimage2, MORPH_DILATE, element, Point(1, 1), 2);
    vector<vector<Point>>contours_4;
    vector<Vec4i> hierarchy_4;
    findContours(srcimage2, contours_4, hierarchy_4, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours_4.size(); i++)
    {
        RotatedRect s = minAreaRect(contours_4[i]);

        if (s.boundingRect().area() > 6000 && s.boundingRect().area() < 8000)
        {
            //rectangle(src, s.boundingRect().tl(), s.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
            p1.y = s.boundingRect().tl().y;
            p1.x = s.boundingRect().tl().x + s.boundingRect().width;
        }
    }

    inRange(src, Scalar(0, 0, 0), Scalar(74, 255, 255), dstimage1);
    //Mat element = getStructuringElement(MORPH_RECT, Size(3, 3));
    morphologyEx(dstimage1, dstimage2, MORPH_ERODE, element, Point(1, 1), 2);
    //vector<vector<Point>>contours;
    //vector<Vec4i> hierarchy;
    findContours(dstimage2, contours_4, hierarchy_4, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours_4.size(); i++)
    {
        RotatedRect r = minAreaRect(contours_4[i]);

        if (r.boundingRect().area() > 10000 && r.boundingRect().area() < 15000)
        {
            //rectangle(src, r.boundingRect().tl(), r.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
            p2.y = r.boundingRect().br().y;
            p2.x = r.boundingRect().br().x - r.boundingRect().width;
        }
    }

    rectangle(result, p1, p2, Scalar(100, 200, 211), 3, LINE_AA);
}
void function5(Mat src)    //冰雪蜜城
{
    Mat src1, dst1;
    Point p1_5; //记录矩形左上角点
    Point p2_5; //记录矩形右下角点

    inRange(src, Scalar(0, 0, 121), Scalar(97, 70, 188), src1);
    vector<vector<Point>>contours;
    vector<Vec4i> hierarchy;
    findContours(src1, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours.size(); i++)
    {
        RotatedRect s = minAreaRect(contours[i]);

        if (s.boundingRect().area() > 1600 && s.boundingRect().area() < 2000)
        {
            //rectangle(src, s.boundingRect().tl(),s.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
            p1_5.y = s.boundingRect().tl().y;
            p1_5.x = s.boundingRect().tl().x + s.boundingRect().width;
        }
    }

    inRange(src, Scalar(0, 0, 0), Scalar(76, 140, 176), dst1);
    findContours(dst1, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
    for (int i = 0; i < contours.size(); i++)
    {
        RotatedRect r = minAreaRect(contours[i]);


        if (r.boundingRect().area() > 1110 && r.boundingRect().area() < 1120)
        {

            //rectangle(src, r.boundingRect().tl(), r.boundingRect().br(), Scalar(100, 200, 211), 3, LINE_AA);
            p2_5.y = r.boundingRect().br().y;
            p2_5.x = r.boundingRect().br().x - r.boundingRect().width;
        }
    }

    rectangle(result, p1_5, p2_5, Scalar(100, 200, 211), 3, LINE_AA);
}
int main()
{
	 src = imread("D:/CloudMusic/任务四.jpg");
	 resize(src, src, Size(src.cols / 2, src.rows / 2));  //裁剪图像
     resize(result, result, Size(result.cols / 2, result.rows / 2));  //裁剪图像
	 namedWindow("output", WINDOW_AUTOSIZE);       //创建窗口
     
     function1(src);    //小可乐瓶
     function2(src);     //大雪碧瓶
     function3(src);     //大牛奶箱
     function4(src);     //大可乐瓶
     function5(src);     //冰雪蜜城

     imshow("output", result); //输出目标图

     waitKey(0);
     
		return 0;
}

